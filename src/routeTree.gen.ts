/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SomethingImport } from './routes/something'
import { Route as ExampleFolder1IndexImport } from './routes/example-folder-1/index'
import { Route as ExampleFolder1Child1Import } from './routes/example-folder-1/child1'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const SomethingRoute = SomethingImport.update({
  id: '/something',
  path: '/something',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ExampleFolder1IndexRoute = ExampleFolder1IndexImport.update({
  id: '/example-folder-1/',
  path: '/example-folder-1/',
  getParentRoute: () => rootRoute,
} as any)

const ExampleFolder1Child1Route = ExampleFolder1Child1Import.update({
  id: '/example-folder-1/child1',
  path: '/example-folder-1/child1',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/something': {
      id: '/something'
      path: '/something'
      fullPath: '/something'
      preLoaderRoute: typeof SomethingImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/example-folder-1/child1': {
      id: '/example-folder-1/child1'
      path: '/example-folder-1/child1'
      fullPath: '/example-folder-1/child1'
      preLoaderRoute: typeof ExampleFolder1Child1Import
      parentRoute: typeof rootRoute
    }
    '/example-folder-1/': {
      id: '/example-folder-1/'
      path: '/example-folder-1'
      fullPath: '/example-folder-1'
      preLoaderRoute: typeof ExampleFolder1IndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/something': typeof SomethingRoute
  '/about': typeof AboutLazyRoute
  '/example-folder-1/child1': typeof ExampleFolder1Child1Route
  '/example-folder-1': typeof ExampleFolder1IndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/something': typeof SomethingRoute
  '/about': typeof AboutLazyRoute
  '/example-folder-1/child1': typeof ExampleFolder1Child1Route
  '/example-folder-1': typeof ExampleFolder1IndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/something': typeof SomethingRoute
  '/about': typeof AboutLazyRoute
  '/example-folder-1/child1': typeof ExampleFolder1Child1Route
  '/example-folder-1/': typeof ExampleFolder1IndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/something'
    | '/about'
    | '/example-folder-1/child1'
    | '/example-folder-1'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/something'
    | '/about'
    | '/example-folder-1/child1'
    | '/example-folder-1'
  id:
    | '__root__'
    | '/'
    | '/something'
    | '/about'
    | '/example-folder-1/child1'
    | '/example-folder-1/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  SomethingRoute: typeof SomethingRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ExampleFolder1Child1Route: typeof ExampleFolder1Child1Route
  ExampleFolder1IndexRoute: typeof ExampleFolder1IndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  SomethingRoute: SomethingRoute,
  AboutLazyRoute: AboutLazyRoute,
  ExampleFolder1Child1Route: ExampleFolder1Child1Route,
  ExampleFolder1IndexRoute: ExampleFolder1IndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/something",
        "/about",
        "/example-folder-1/child1",
        "/example-folder-1/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/something": {
      "filePath": "something.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/example-folder-1/child1": {
      "filePath": "example-folder-1/child1.tsx"
    },
    "/example-folder-1/": {
      "filePath": "example-folder-1/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
